#!/usr/bin/env python3
from ghost_config import GhostConfig
from ghost_crawler import GhostCrawler
import json
import os

# Initialize config - this will load from config.json in the root
config = GhostConfig()

# Explicitly set output_dir for this test script's logs, if any are generated by GhostCrawler
# This ensures test-specific logs don't clutter the main output or root.
test_api_output_dir = "test_api_output"
if not os.path.exists(test_api_output_dir):
    os.makedirs(test_api_output_dir)
config.set("output_dir", test_api_output_dir) # Redirect crawler logs for this test
# Re-setup logging if crawler instantiation depends on it for its own logger
# config._setup_logging() # GhostCrawler gets its logger from config, so this is good.

# Initialize crawler - this will use the API key from config.json
crawler = GhostCrawler(config)

# Test single search
print("Testing Google Search API...")
# The API key and CX ID from configure_api.py should be used by GhostCrawler
# as it reads them from the config.
# The google_search_mode was set to "real".
# GhostCrawler will attempt to use the real Google API.
# If the API key AIzaSyBia6w4jr6tXeceUk9rv3WlKkgCqlMjiuA is invalid or restricted,
# the API call will likely fail. GhostCrawler's _perform_search
# has retry logic and error handling. If it ultimately fails, it returns [].
results = crawler._perform_search("US Mobile prepaid no ID", num_results=3)

if results:
    print(f"✓ API Working! Found {len(results)} results")
    print("\nFirst result:")
    # Ensure results are serializable before printing, handle potential complex objects if any
    try:
        print(json.dumps(results[0], indent=2))
    except TypeError:
        print("Could not serialize the first result to JSON. Printing as string:")
        print(str(results[0]))
    # Log all results for inspection if needed, especially if the first one is minimal
    print("\nFull results (first 3 or fewer):")
    for res_item in results:
        try:
            print(json.dumps(res_item, indent=2))
        except TypeError:
            print(str(res_item))

else:
    print("✗ API Failed - Check credentials or API status.")
    print("  This could be due to an invalid/restricted API key, incorrect CX ID,")
    print("  billing issues with the Google Cloud Project, or the API not being enabled.")

# Print the search mode the crawler decided on, for clarity
print(f"\nGhostCrawler effective search service mode: {crawler.search_service if isinstance(crawler.search_service, str) else 'REAL_SERVICE_OBJECT'}")
