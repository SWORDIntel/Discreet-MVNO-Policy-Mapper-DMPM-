version: '3.8'

services:
  ghost-dmpm-dashboard: # Renamed service for clarity, as it runs the dashboard
    build:
      context: .. # Project root
      dockerfile: docker/Dockerfile # Path to Dockerfile relative to project root
    container_name: ghost-dmpm-dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./test_output:/app/test_output
      - ./config:/app/config
    environment:
      - GHOST_OUTPUT_DIR=/app/test_output
      - GHOST_CONFIG_FILE=/app/config/ghost_config.json # App inside container looks for this
      - PYTHONUNBUFFERED=1
    command: ["ghost-dash"] # Use the new console script for the dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"] # Changed to /api/health based on dashboard code
      interval: 30s
      timeout: 10s
      retries: 3

  ghost-mcp:
    build:
      context: .. # Project root
      dockerfile: docker/Dockerfile # Path to Dockerfile relative to project root
    container_name: ghost-mcp-server
    ports:
      - "8765:8765"
    environment:
      - MCP_AUTH_TOKEN=ghost-mcp-2024
      - PYTHONUNBUFFERED=1 # For immediate logging output
    volumes:
      - ./data:/app/data # For db access by MCP server if needed
      - ./logs:/app/logs # For MCP server logs
      - ./reports:/app/reports # For report access by MCP server
      - ./test_output:/app/test_output # For parsed/raw data access
      - ./config:/app/config # For config access
    # Ensure ghost-dmpm (which might create initial db/config) is up,
    # though MCP server is largely independent for now.
    # depends_on:
    #   - ghost-dmpm-dashboard # Depends on the renamed dashboard service
    command: ["ghost-mcp"] # Use the new console script for the MCP server
    restart: unless-stopped
